import express from "express";
import dotenv from "dotenv";
import cors from "cors";
import morgan from "morgan";
import mongoose from "mongoose";
import { connectDB, PORT } from "./config/db.js"; // ‚úÖ Ensure correct import

import employeeRoutes from "./routes/employeeRoutes.js";
import attendanceRoutes from "./routes/attendanceRoutes.js"; // ‚úÖ Use ES6 import

import leaveRoutes from "./routes/leaveRoutes.js";
 


// ‚úÖ Load environment variables
dotenv.config();

// ‚úÖ Connect to MongoDB
connectDB();

const app = express();

// ‚úÖ Middleware
app.use(express.json());
app.use(cors());
app.use(morgan("dev")); // ‚úÖ Logs incoming requests

// ‚úÖ Static admin credentials
const adminCredentials = {
  username: "admin",
  password: "123456",
};

// ‚úÖ Base Route
app.get("/", (req, res) => {
  res.status(200).json({ message: "üöÄ Employee Management System API is running!" });
});

// ‚úÖ Authentication Route
app.post("/api/login", (req, res) => {
  const { username, password } = req.body;

  if (username === adminCredentials.username && password === adminCredentials.password) {
    return res.status(200).json({ success: true, message: "Login Successful" });
  } else {
    return res.status(401).json({ success: false, message: "Invalid Credentials" });
  }
});

// ‚úÖ API Routes
app.use("/api/employees", employeeRoutes);
app.use("/api/attendance", attendanceRoutes);
app.use("/api/leave", leaveRoutes);

// ‚úÖ Global Error Handling Middleware
app.use((err, req, res, next) => {
  console.error("‚ùå Server Error:", err.message);
  res.status(500).json({ success: false, message: "Internal Server Error" });
});

// ‚úÖ Start Server
const port = PORT || 5000;
const server = app.listen(port, () => {
  console.log(`üöÄ Server running on port ${port}`);
});

// ‚úÖ Graceful Shutdown Handling
process.on("SIGINT", async () => {
  console.log("‚ö†Ô∏è Closing server and database connection...");
  await mongoose.connection.close();
  server.close(() => process.exit(0));
});

// ‚úÖ Handle Uncaught Exceptions & Rejections
process.on("uncaughtException", (err) => {
  console.error("‚ö†Ô∏è Uncaught Exception:", err);
  process.exit(1);
});

process.on("unhandledRejection", (err) => {
  console.error("‚ö†Ô∏è Unhandled Rejection:", err);
  process.exit(1);
});
